//	Convert into rem value.
//
@function calculateRem($font-size) {
	$rem: $font-size / 16px;
	@return $rem * 1rem;
}

//	A function for converting a number into unitless (without px, em, etc.)
//
@function strip-unit($number) {
	@if type-of($number) == 'number' and not unitless($number) {
		@return $number / ($number * 0 + 1);
	}

	@return $number;
}

//	Used to get a spacer value from the provided map.
//
@function spacer($value, $map: $spacers) {
	@return map-get($map, $value);
}


//	A function for getting one of the predetermined letter spacing sizes.
//
@function letter-spacing($key: base) {
	@return map-get($letter-spacing, $key);
}


/*/
/*	Media Query and Breakpoints Functions
/*/
@function breakpoint($key: phone) {
	@return map-get($breakpoints, $key);
}


/*/
/*	Tinter Shader Functions
/*/
@function tint($color, $percentage) {
	@return mix(white, $color, $percentage);
}

@function shade($color, $percentage) {
	@return mix(black, $color, $percentage);
}

/**
/*	Color Shade Functions
/*/
@function primary-color($key: base) {
	@return map-get($primary-shades, $key);
}

@function secondary-color($key: base) {
	@return map-get($secondary-shades, $key);
}

@function gray($key: "white") {
	@return map-get($grays, $key);
}

@function ui-color($key: "primary") {
	@return map-get($ui-colors, $key);
}

@function box-shadow($key: "base") {
	@return map-get($box-shadow, $key);
}

@function color-yiq($color) {
	$r: red($color);
	$g: green($color);
	$b: blue($color);
  
	$yiq: (($r * 299) + ($g * 587) + ($b * 114)) / 1000;
  
	@if ($yiq >= $yiq-contrasted-threshold) {
	  @return $yiq-text-dark;
	} @else {
	  @return $yiq-text-light;
	}
}

/*/
/*	Component-based Functions
/*/
@function border-radius($value: base) {
	@return map-get($border-radius, $value);
}
