//-----------------------------------------------------------------------------
//  T I N T E R   S H A D E R
//
//	An advanced map getter function used to fetch specific values from a
//	nested map variable.
//
//  Usage:  `#{property}: tint(#{color}, #{percentage})` or 
//          `#{property}: tint(#{color}, #{percentage})`
//

@function tint($color, $percentage) {
	@return mix(white, $color, $percentage);
}

@function shade($color, $percentage) {
	@return mix(black, $color, $percentage);
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
//  C O L O R   S H A D E
//

@function color-shade($type, $key, $shades: $color-shades) {
    @return nested-map-get($shades, $type, $key);
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
//  C O L O R   F U N C T I O N S
//

@function primary-color($key: 600) {
	@return color-shade(primary, $key);
}

@function secondary-color($key: 600) {
	@return color-shade(secondary, $key);    
}

@function success-color($key: 600) {
    @return color-shade(success, $key);
}

@function danger-color($key: 600) {
    @return color-shade(danger, $key);
}

@function warning-color($key: 600) {
    @return color-shade(warning, $key);
}

@function gray($key: 100) {
	@return color-shade(gray, $key);
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
//  C O L O R   Y I Q
//
@function color-yiq($color) {
	$r: red($color);
	$g: green($color);
	$b: blue($color);
  
	$yiq: (($r * 299) + ($g * 587) + ($b * 114)) / 1000;
  
	@if ($yiq >= $yiq-contrasted-threshold) {
	  @return $yiq-text-dark;
	} @else {
	  @return $yiq-text-light;
	}
}

//-----------------------------------------------------------------------------
